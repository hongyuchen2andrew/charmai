// import os
// import openai
// import json
// import time

// class LargeLanguageModels:
//     def __init__(self, profile, userProfile, key):
//         self.profile = profile
//         self.userProfile = userProfile
//         self.key = key
//     #The most basic chatGPT with model == "gpt-4"
//     def chatGPT(self, prompt, recording):
//         openai.api_key = self.key
//         completion = openai.chat.completions.create(
//         model="gpt-4",
//         messages=[
//           {"role": "system", "content": f"This is your past chat history{recording}, all your output should based on the you chat history"},
//           {"role": "user", "content": f"{prompt}"}
//         ]
//         )
//         recording.append('User:'+ prompt)
//         recording.append('System:'+ completion.choices[0].message.content)
//         return completion.choices[0].message.content, recording
    
//     #If the user choose option == role play, then GPT will play the specific role
//     def rolePlay(self, prompt, recording):
//         openai.api_key = self.key
//         age, gender, career, personality, hobby = self.profile
//         userName, userAge, userGender, userCareer, userPersonality, userHobby = self.userProfile
//         completion = openai.chat.completions.create(
//           model="gpt-4",
//           messages=[
//             {"role": "system", "content": f'You\'re a person that\'s really good at chatting. Right now, you\'re using a dating app.\
//                               You\'re a {age}-year-old {gender} {career} with personalities including {personality}.\
//                               She/He has hobbies like {hobby}\
//                               You\'re chatting with a {userAge}-year-old {userGender} {userCareer} with personalities including {userPersonality}.\
//                               You has hobbies like {userHobby}\
//                               Try to chat with her as much as possible to make her feel good about you.'},
//             {"role": "system", "content": 'Below are some tips that you can follow.'},
//             {"role": "system", "content": '1. Ask about something specific on the person\'s profile. For example, “You work at an art museum? That\'s so interesting! What\'s that like?”'},
//             {"role": "system", "content": '2. Offer up a fun "would you rather" question. For example, “Would you rather spend a weekend at home watching Netflix in PJs or being up and out early, enjoying the day? ”'},
//             {"role": "system", "content": '3. Ask a general open-ended question. For example, "What\'s your favorite movie?" or "Do you have animals?".'},
//             {"role": "system", "content": '4. Ask what they\'re looking for. For example, "What does your ideal romantic future look like?" or "What are you looking for in a relationship?".'},
//             {"role": "system", "content": '5. When replying, you need to use one sentence to share your experience on the last topic.'},
//             #{"role": "system", "content": '6. Add some emojis and use some common abbreviations if suitable. For example, \'let me know\' can be writen into \'LMK\''},
//             {"role": "system", "content": f"This is your past chat history{recording}, all your output should based on the you chat history"},
//             {"role": "system", "content": 'Tone: Conversational, Spartan, Less corporate jargon, No difficult words'},
//             {"role": "system", "content": 'Please keep your answer within 40 words.'},
//             {"role": "user", "content": f"{prompt}"}
//           ]
//         )
//         recording.append('User:'+ prompt)
//         recording.append('System:'+ completion.choices[0].message.content)
//         return completion.choices[0].message.content, recording
    
//     #If the user choose option == teaching, then GPT will play the specific role and give feedback to your message
//     def teaching(self, prompt, recording):
//         openai.api_key = self.key
//         age, gender, career, personality, hobby = self.profile
//         userName, userAge, userGender, userCareer, userPersonality, userHobby = self.userProfile
//         completion = openai.chat.completions.create(
//           model="gpt-4",
//           messages=[
//             {"role": "system", "content": f'You\'re a person that\'s really good at chatting. Right now, you\'re using a dating app.\
//                               You\'re a {userAge}-year-old {userGender} {userCareer} with personalities including {userPersonality}.\
//                               You has hobbies like {userHobby}\
//                               You\'re chatting with a {age}-year-old {gender} {career} with personalities including {personality}.\
//                               She/He has hobbies like {hobby}\
//                               Try to chat with her as much as possible to make her feel good about you.'},
//             {"role": "system", "content": f"This is your past chat history{recording}, all your output should based on the you chat history"},
//             {"role": "system", "content": 'Tone: Conversational, Spartan, Less corporate jargon'},
//             {"role": "user", "content": f"{prompt}"}
//           ]
//         )
//         recording.append('User:'+ prompt)
//         recording.append('System:'+ completion.choices[0].message.content)
//         return completion.choices[0].message.content, recording
    
//     #If the user choose option == analysis, then GPT will analysis the history file or screen shot and teach you how to reply
//     def analysis(self, prompt, recording):
//         openai.api_key = self.key
//         age, gender, career, personality, hobby = self.profile
//         userName, userAge, userGender, userCareer, userPersonality, userHobby = self.userProfile
//         completion = openai.chat.completions.create(
//           model="gpt-4",
//           messages=[
//             {"role": "system", "content": f'You\'re a person that\'s really good at chatting. Right now, you\'re using a dating app.\
//                               You\'re a {userAge}-year-old {userGender} {userCareer} with personalities including {userPersonality}.\
//                               You has hobbies like {userHobby}\
//                               You\'re chatting with a {age}-year-old {gender} {career} with personalities including  {personality}.\
//                               She/He has hobbies like {hobby}\
//                               Try to chat with her as much as possible to make her feel good about you.'},
//             {"role": "system", "content": f"This is your past chat history{recording}, all your output should based on the you chat history"},
//             {"role": "system", "content": 'Tone: Conversational, Spartan, Less corporate jargon'},
//             {"role": "user", "content": f"{prompt}"}
//           ]
//         )













import os
import openai
import json
import time

class Profile:
    def __init__(self, prompt, api_key):
        self.prompt = prompt
        self.api_key = api_key
        # self.age = 'unknown'
        # self.gender = 'unknown'
        # self.career = 'unknown'
        # self.personality = 'unknown'
        # self.hobby = 'unknown'
        # self.situation = 'unknown'
        self.max_try = 0

    def questionAnswering(self, question, answer_format):
        openai.api_key = self.api_key
        completion = openai.chat.completions.create(
        model="gpt-4",
        messages=[
          {"role": "system", "content": f'You\'re a bot that\'s really good at answering questions based on the information user given.'},
          {"role": "system", "content": f'You should answer the following question based on the prompt user input:{question}'},
          {"role": "system", "content": f'Your answer should follow the format:{answer_format}'},
          {"role": "system", "content": f'Your answer must strictly follow the format mentioned above.'},
          {"role": "user", "content": f"{self.prompt}"}
        ]
        )
        return completion.choices[0].message.content

    def getAge(self):
        question = 'What is the age?'
        answer_format = 'Age should be an integer, you can only return an integer.\
                         For example, return 15 but not he is 15 years old.'
        age = self.questionAnswering(question, answer_format)
        try:
            age = int(age)
            self.max_try = 0
            return age
        except:
            age = self.questionAnswering(question, answer_format)
            self.max_try += 1
            if self.max_try == 5:
                return 'unknown'

    def getGender(self):
        question = 'What is the gender of the person that was mentioned in the prompt?'
        answer_format = 'Although gender can not only be female or male, please return a single word.\
                         For example, return \'male\' \'female\' or \'non-binary\'.'
        gender = self.questionAnswering(question, answer_format)
        if len(gender.split(' ')) <= 4:
            self.max_try = 0
            return gender
        else:
            gender = self.questionAnswering(question, answer_format)
            self.max_try += 1
            if self.max_try == 5:
                return 'unknown'
        return gender

    def getCareer(self):
        question = 'What is the career of the person that was mentioned in the prompt?'
        answer_format = 'Career should strictly less than ten English words.\
                         If it has more than ten words, please return the most important ten keywords.\
                         For example, return \'student\' or \'machine learning engineer\'.'
        career = self.questionAnswering(question, answer_format)
        if len(career.split(' ')) <= 10:
            self.max_try = 0
            return career
        else:
            career = self.questionAnswering(question, answer_format)
            self.max_try += 1
            if self.max_try == 5:
                return 'unknown'
            
    def getPersonality(self):
        question = 'What are the personalities of the person that was mentioned in the prompt?'
        answer_format = 'You can only return at most five personality related keywords which are seperated by a comma. \
                        If there is less than five personalities, just return them. \
                        Please not output a whole sentence or even a paragraph.\
                        For example, return \'outgoing, humour\''
        personality = self.questionAnswering(question, answer_format)
        if len(personality.split(',')) <= 5:
            self.max_try = 0
            return personality
        else:
            personality = self.questionAnswering(question, answer_format)
            self.max_try += 1
            if self.max_try == 5:
                return 'unknown'
            
    def getHobby(self):
        question = 'What are the hobbies of the person that was mentioned in the prompt?'
        answer_format = 'You can only return at most five hobby related keywords which are seperated by a comma.\
                         If there is less than five hobbies, just return them.\
                         Please not output a whole sentence or even a paragraph.\
                         For example, return \'swim, reading, video games.\''
        hobby = self.questionAnswering(question, answer_format)
        if len(hobby.split(',')) <= 5:
            self.max_try = 0
            return hobby
        else:
            hobby = self.questionAnswering(question, answer_format)
            self.max_try += 1
            if self.max_try == 5:
                return 'unknown'

    def returnProfile(self):
        age = self.getAge()
        gender = self.getGender()
        career = self.getCareer()
        personality = self.getPersonality()
        hobby = self.getHobby()

        return age, gender, career, personality, hobby

# introduction = 'Hi, my name is Andrew. I have lived in China for 20 years. Last year, I went to MIT for my master degree. So as you can see, I am twenty one years old\
#                 I love coding, playing basketball, singing, going hiking. Nice to meet you.'  
# p = Profile(introduction)
# age, gender, career, personality, hobby = p.returnProfile()
# print('age:', age)
# print('gender:', gender)
# print('career:', career)
# print('personality:', personality)
# print('hobby:', hobby)
//         recording.append('User:'+ prompt)
//         recording.append('System:'+ completion.choices[0].message.content)
//         return completion.choices[0].message.content, recording
